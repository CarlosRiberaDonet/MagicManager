/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package GUI;

import Controllers.CardController;
import Controllers.UserController;
import com.fasterxml.jackson.core.JsonParseException;
import com.fasterxml.jackson.databind.JsonMappingException;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ImageIcon;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.SwingConstants;
/**
 *
 * @author Carlos Ribera
 */
public class MainMenu extends javax.swing.JFrame {

    /**
     * Creates new form Main
     */
    
    public MainMenu() {     
        initComponents();
        setTitle("Magic: The Gathering");
        this.setLocationRelativeTo(null);
        setSize(500, 300);
        setResizable(false);
        // Configura el comportamiento de cierre predeterminado
        this.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);

        // Agrega el WindowListener para manejar el cierre de la ventana
        this.addWindowListener(new WindowAdapter() {
            @Override
            public void windowClosing(WindowEvent e) {
                // Verificar si el flag está activado y guardar el mapa si es necesario
                if (UserController.flag) {
                    UserController.UpdateUserJson(UserController.cardMap);
                }
                // Liberar los recursos antes de cerrar
                dispose();
                System.exit(0); // Cerrar la aplicación
            }
        });
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jFormattedTextField1 = new javax.swing.JFormattedTextField();
        MyCards_jButton1 = new javax.swing.JButton();
        list_jButton3 = new javax.swing.JButton();
        exit_jButton5 = new javax.swing.JButton();
        update_jButton6 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();

        jFormattedTextField1.setText("jFormattedTextField1");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);

        MyCards_jButton1.setText("Mis Cartas");
        MyCards_jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MyCards_jButton1ActionPerformed(evt);
            }
        });

        list_jButton3.setText("Listar");
        list_jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                list_jButton3ActionPerformed(evt);
            }
        });

        exit_jButton5.setText("Salir");
        exit_jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exit_jButton5ActionPerformed(evt);
            }
        });

        update_jButton6.setText("Descargar Cartas");
        update_jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                update_jButton6ActionPerformed(evt);
            }
        });

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/magic_clean.png"))); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(45, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(MyCards_jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(list_jButton3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(update_jButton6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(exit_jButton5, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 146, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(47, 47, 47)
                .addComponent(jLabel1)
                .addGap(30, 30, 30))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(28, 28, 28)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addComponent(MyCards_jButton1)
                        .addGap(18, 18, 18)
                        .addComponent(list_jButton3)
                        .addGap(18, 18, 18)
                        .addComponent(update_jButton6)
                        .addGap(18, 18, 18)
                        .addComponent(exit_jButton5)))
                .addContainerGap(37, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    
    private void update_jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_update_jButton6ActionPerformed
        // Descargar el JSON de la api de Scryfall
        DownloadProgressDialog downloadDialog = new DownloadProgressDialog(this);
        downloadDialog.setVisible(true); // Muestra el diálogo de descarga

        try {         
            CardController.newJSON();
            JOptionPane.showMessageDialog(this, "La base de datos ha sido actualizada exitosamente.", "Éxito", JOptionPane.INFORMATION_MESSAGE);
        } catch (IllegalStateException e) {
            JOptionPane.showMessageDialog(this, e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        } catch (IOException e) {
            JOptionPane.showMessageDialog(this, "Error al leer o escribir el archivo JSON.", "Error de E/S", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_update_jButton6ActionPerformed

    private void exit_jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exit_jButton5ActionPerformed
        UserController.UpdateUserJson(UserController.cardMap);
        System.exit(0);
    }//GEN-LAST:event_exit_jButton5ActionPerformed

    private void list_jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_list_jButton3ActionPerformed
       // Compruebo que el Json existe
       if (!CardController.newJson.exists()){
           JOptionPane.showMessageDialog(this, "No se puedieron cargas las cartas, asegurese de que la base de datos está actualizada", "Error", JOptionPane.ERROR_MESSAGE);
           return;
       }
        try {
            // Compruebo si el cardMap está cargado en memoria
            if (CardController.cardMap == null || !CardController.cardMap.isEmpty()) {
                // Intentar cargar las cartas
                System.out.println("Cargando cartas desde newJson");
                CardController.loadCards(CardController.newJson);
            }
            // Abre el CardListDialog con las cartas del cardMap de la clase CardController
            CardListDialog cardListDialog = new CardListDialog(this, CardController.cardMap, "Lista de Cartas");
            cardListDialog.setVisible(true);

        } catch (IllegalStateException e) {
            JOptionPane.showMessageDialog(this, e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        } catch (IOException ex) {
            Logger.getLogger(MainMenu.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_list_jButton3ActionPerformed

    private void MyCards_jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MyCards_jButton1ActionPerformed
        
         // Compruebo si el cardMapUser de la clase UserController está cargado
        if (UserController.cardMap == null || UserController.cardMap.isEmpty()) {
            try {
                // Compruebo si existe userJson
                if (UserController.userJson.exists())
                    //Cargo el Json del USR en el Map del USR
                UserController.cardMap = CardController.cardReaderToJackson(UserController.userJson);       
            } catch (JsonParseException | JsonMappingException ex) {
                JOptionPane.showMessageDialog(this, "Error de formato en el archivo JSON.", "Error", JOptionPane.ERROR_MESSAGE);
            } catch (IOException ex) {
                JOptionPane.showMessageDialog(this, "No se pudo acceder al archivo JSON. Revisa permisos o ruta.", "Error", JOptionPane.ERROR_MESSAGE);
            }    
        }
        else if (UserController.cardMap == null || UserController.cardMap.isEmpty()){
            JOptionPane.showMessageDialog(this, "No tiene cargas guardadas..", "Info", JOptionPane.INFORMATION_MESSAGE);
            return;
        }   
        // Abre CardListDialog con las cartas del cardMap de la clase UserController
        CardListDialog cardListDialog = new CardListDialog(this, UserController.cardMap, "Mis Cartas");
        cardListDialog.setVisible(true);
    }//GEN-LAST:event_MyCards_jButton1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainMenu.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainMenu.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainMenu.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainMenu.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainMenu().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton MyCards_jButton1;
    private javax.swing.JButton exit_jButton5;
    private javax.swing.JFormattedTextField jFormattedTextField1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JButton list_jButton3;
    private javax.swing.JButton update_jButton6;
    // End of variables declaration//GEN-END:variables
}
